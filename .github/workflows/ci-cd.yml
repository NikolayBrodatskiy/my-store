name: ci-cd

on:
  push:
    branches: ['production']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_PREFIX: my-store

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      APP_IMAGE: ${{ steps.setImageName.outputs.APP_IMAGE }}
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./_docker/github/app/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        id: artifact
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - id: setImageName
        run: echo "APP_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.push.outputs.digest }}" >> "$GITHUB_OUTPUT"

  clean-up:
    needs: [build]
    runs-on: self-hosted
    environment: production
    steps:
      - name: qwe
        run: echo ${{vars}}

      - name: Stop all containers
        run: docker stop $(docker ps -a -q) || true

      - name: Remove unused containers in addition to other Docker resources, such as (unused) images and networks.
        run: docker system prune -f || true

  deploy:
    needs: [clean-up]
    runs-on: self-hosted
    environment: production
    env:
      APP_IMAGE: ${{needs.build.outputs.APP_IMAGE}}
    services:
      nginx:
        image: nginx:1.27.0-alpine-slim
        ports:
          - 80:80
        volumes:
          - ./_docker/nginx/conf.d:/etc/nginx/conf.d
          - ./:/var/www
        options:
          --name my-store_nginx

      app:
        image: ${{vars.APP_IMAGE}}
        ports:
          - 5173:5173
        volumes:
          - ./:/var/www
        env:
          APP_URL: ${{vars.APP_URL}}
          DB_CONNECTION: ${{vars.DB_CONNECTION}}
          DB_HOST: ${{vars.DB_HOST}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
        options:
          --name my-store_app

      db:
        image: postgres:16.3-alpine3.20
        ports:
          - 5432:5432
        volumes:
          - ./var/tmp/db:/var/lib/pgsql
        env:
          POSTGRES_DB: ${{vars.DB_DATABASE}}
          POSTGRES_USER: ${{vars.DB_USERNAME}}
          POSTGRES_PASSWORD: ${{secrets.DB_PASSWORD}}
        options:
          --name my-store_db

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker containers
        run: docker ps
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app composer install
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app npm install
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app npm run build
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app ls -la
      - run: docker ps
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app php artisan migrate --force
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app php artisan cache:clear
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app php artisan config:cache
      - run: docker exec ${{ vars.CONTAINER_PREFIX }}_app php artisan key:generate
